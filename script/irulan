#!/usr/bin/env perl
#
# irulan - interacts with the Web::Irulan SSH host key database

use 5.16.0;
use warnings;
use open IN => qw(:bytes);
use FindBin ();

BEGIN {
    $ENV{$_} = 1 for qw(MOJO_NO_NNR MOJO_NO_SOCKS MOJO_NO_TLS);
    unshift @INC, "$FindBin::Bin/../lib";
}
use Data::SSHPubkey 1.00 ();
use Data::UUID ();
use File::Temp ();
use Getopt::Long qw(GetOptions);
use Mojo::SQLite ();
use Scalar::Util qw(looks_like_number);
use Socket qw(:addrinfo AF_INET AF_INET6 SOCK_RAW inet_ntop inet_pton);
use Text::ParseWords qw(shellwords);
use Web::Irulan::Model::Hostkeys ();

my $msl = Mojo::SQLite->new->from_filename($ENV{IRULAN_DB_PATH} // 'irulan.db');
my $db  = Web::Irulan::Model::Hostkeys->new(sqlite => $msl);

my ($Flag_NoLookup, $Flag_PostCmd, @audit_cmd);
my $exit_status = 0;

my %commands = (
    addhost => sub {
        my ($cmd) = @_;
        my $sysid = $ARGV[0];
        my ($host, $port) = hostport(@ARGV[ 1, 2 ]);
        die "Usage: irulan addhost sysid hostname [port]\n"
          if !defined $sysid
          or $sysid !~ m/^\d+$/a
          or !defined $host;
        if (!$Flag_NoLookup) {
            die "irulan: no IP associated with $host\n" unless ip_addrs($host);
        }
        $db->add_host($sysid, $host, $port);
        exec_postcmd($cmd);
    },
    audit => sub {
        die "irulan: IRULAN_AUDIT_CMD must be set\n"
          if !exists $ENV{IRULAN_AUDIT_CMD}
          or !length $ENV{IRULAN_AUDIT_CMD};
        @audit_cmd = shellwords($ENV{IRULAN_AUDIT_CMD});
        my ($host, $port) = hostport(@ARGV[ 0, 1 ]);
        if (defined $host) {
            audit_host($host, $port);
            exit $exit_status;
        } else {
            audit_all();
        }
    },
    cat => sub {
        my %pubkeys;
        if (@ARGV) {
            my $done_stdin = 0;
            for my $arg (@ARGV) {
                if ($arg eq '-' and !$done_stdin) {
                    @pubkeys{ map { $_->[1] } read_from_fh() } = ();
                    $done_stdin = 1;
                } else {
                    open my $fh, '<', $arg or die "irulan: could not open $arg: $!\n";
                    @pubkeys{ map { $_->[1] } read_from_fh($fh) } = ();
                }
            }
        } else {
            @pubkeys{ map { $_->[1] } read_from_fh() } = ();
        }
        die "irulan: no pubkeys parsed\n" unless %pubkeys;
        $db->add_system(Data::UUID->new->create_str, 'cat ' . time(), keys %pubkeys);
    },
    keyscan => sub {
        my ($host, $port) = hostport(@ARGV);
        die "Usage: irulan keyscan hostname [port]\n" if !defined $host;
        my @command = (qw(ssh-keyscan -p), $port);
        open(my $fh, '-|', @command, '--', $host)
          or die "irulan: @command failed: $!\n";
        my @pubkeys = read_from_fh($fh);
        die "irulan: no pubkeys parsed\n" unless @pubkeys;
        $db->add_system(
            Data::UUID->new->create_str,
            ($port == 22 ? $host : "$host $port"),
            map { $_->[1] } @pubkeys
        );
    },
    list => sub {
        my $ret = $db->hosts;
        my %seen;
        while (my $host = $ret->hash) {
            my $hp = $host->{hostname} . ':' . $host->{port};
            warn "duplicate entry for $hp" if $seen{$hp}++;
            say $host->{sysid}, ' ', $host->{hostname},
              ($host->{port} == 22 ? '' : ' ' . $host->{port});
        }
    },
    rmhost => sub {
        my ($cmd) = @_;
        my ($host, $port) = hostport(@ARGV);
        die "Usage: irulan rmhost hostname [port]\n" if !defined $host;
        $db->remove_host($host, $port);
        exec_postcmd($cmd);
    },
    rmsystem => sub {
        my ($cmd) = @_;
        my $sysid = $ARGV[0];
        die "Usage: irulan rmsystem sysid\n"
          if !defined $sysid or $sysid !~ m/^\d+$/a;
        $db->remove_system($sysid);
        exec_postcmd($cmd);
    },
    ssh_known_hosts => sub {
        my $notbefore = $ARGV[0];
        if (defined $notbefore and length $notbefore) {
            die "irulan: invalid epoch value\n" if !looks_like_number $notbefore;
            exit 2 if $db->most_recent <= int $notbefore;
        }
        my $s   = '';
        my $ret = $db->known_hosts;
        while (my $h = $ret->hash) {
            my $alts = alternize($h->{hostname}, $h->{port});
            say $alts, ' ', $h->{pubkey};
        }
    },
    unhosted => sub {
        my $ret = $db->unhosted;
        while (my $sys = $ret->hash) {
            say join ' ', map { $sys->{$_} } qw(sysid uuid info);
        }
    },
);

# this catches flags before or after the command as I found myself using
# both locations while writing the tests
GetOptions(
    'help|h|?' => \&emit_help,
    'n'        => \$Flag_NoLookup,
    'P=s'      => \$Flag_PostCmd,
);
my $cmd = shift;
emit_help() unless defined $cmd and exists $commands{$cmd};
$commands{$cmd}->($cmd);

# hostname -> hostname,ip; ip -> ip; host:2222 -> [host]:2222,[ip]:2222; etc
# with the (perhaps invalid) assumption that the $host has already been
# canonified, somewhere
sub alternize {
    my ($host, $port) = @_;
    my %alts;
    @alts{ $host, $Flag_NoLookup ? () : ip_addrs($host) } = ();
    # TODO may want more complicated sort that puts the hostname (if
    # any) before the IP addresses, KLUGE done here via a reverse sort
    join ',', map { $port == 22 ? $_ : "[$_]:$port" } sort { $b cmp $a } keys %alts;
}

sub audit_all {
    my $ret = $db->hosts;
    while (my $h = $ret->hash) {
        audit_host($h->{hostname}, $h->{port});
    }
    exit $exit_status;
}

# basically drop *only* the pubkeys for the host (so nothing else in
# the database can match) into a temporary file and feed that to the
# audit tool
sub audit_host {
    my ($host, $port) = @_;
    my $alts    = alternize($host, $port);
    my @pubkeys = $db->pubkeys($host, $port);
    die "irulan: no public keys for $host:$port\n" if !@pubkeys;
    my $fh   = File::Temp->new(TEMPLATE => "iraud.XXXXXXXXXX", TMPDIR => 1);
    my $file = $fh->filename;
    $fh->say($alts, ' ', $_->[0]) for @pubkeys;
    if (system(@audit_cmd, $file, $host, $port) == 0) {
        say "$host:$port ok";
    } else {
        warn "irulan: audit failed for $host:$port: $?\n";
        say "$host:$port fail";
        $exit_status = 1;
    }
}

# always must canonify the input so that IP addresses are normalized to
# the same form used by ssh_known_hosts and hopefully also our database
sub canonify_host {
    my ($input) = @_;
    my $ip = inet_pton(AF_INET, $input);
    if (defined $ip) {
        return inet_ntop(AF_INET, $ip);
    } else {
        $ip = inet_pton(AF_INET6, $input);
        if (defined $ip) {
            return inet_ntop(AF_INET6, $ip);
        }
    }
    # assume is hostname
    #
    # TWEAK some sites may want stronger verification of hostnames (e.g.
    # that only fully qualified hostnames are supplied)
    return $input;
}

sub emit_help {
    say STDERR "Usage: irulan command [cmd-args ..]\n  commands: " . join ', ',
      sort keys %commands;
    exit 64;
}

sub exec_postcmd {
    my ($cmd) = @_;
    if ($Flag_PostCmd) {
        { exec shellwords($Flag_PostCmd), $cmd };
        die "irulan: could not exec $Flag_PostCmd: $!\n";
    }
}

sub hostport {
    my ($host, $port) = @_;
    return if !defined $host or !length $host;
    if (defined $port and length $port) {
        # yes I know there's /etc/services and getservbyname but this
        # only accepts a numeric port
        die "irulan: invalid port number\n" if !looks_like_number $port;
        $port = int $port;
    } else {
        $port = 22;
    }
    return canonify_host($host), $port;
}

# NIx_* first show up in perl 5.16.0 Socket.pm docs, not in perl 5.14 so
# that's where the minimum version bar is set
sub ip_addrs {
    my ($host) = @_;
    my ($err, @res) = getaddrinfo($host, "", { socktype => SOCK_RAW });
    die "irulan: getaddrinfo failed '$host': $err\n" if $err;
    map {
        my ($err, $ip) = getnameinfo($_->{addr}, NI_NUMERICHOST, NIx_NOSERV);
        die "irulan: getnameinfo failed '$host': $err\n" if $err;
        $_ = $ip;
    } @res;
}

sub read_from_fh {
    my ($fh) = @_;
    Data::SSHPubkey::pubkeys(
        \do {
            local $/;
            if (defined $fh) { binmode $fh; readline $fh }
            else             { readline }
        }
    );
}
